// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/objectboxFolder.dart';
import 'domain/objectboxitem.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4010830529221176091),
      name: 'objectboxFolder',
      lastPropertyId: const IdUid(3, 1374189734097214140),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6415115342088163483),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3945142466282321632),
            name: 'floderName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1374189734097214140),
            name: 'floderDescription',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 600504339725365371),
      name: 'objectboxItem',
      lastPropertyId: const IdUid(4, 8409863850738919213),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5625886045084865109),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3335415220974862656),
            name: 'itemName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1824275059593568120),
            name: 'itemDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8409863850738919213),
            name: 'folderID',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 600504339725365371),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    objectboxFolder: EntityDefinition<objectboxFolder>(
        model: _entities[0],
        toOneRelations: (objectboxFolder object) => [],
        toManyRelations: (objectboxFolder object) => {},
        getId: (objectboxFolder object) => object.id,
        setId: (objectboxFolder object, int id) {
          object.id = id;
        },
        objectToFB: (objectboxFolder object, fb.Builder fbb) {
          final floderNameOffset = object.floderName == null
              ? null
              : fbb.writeString(object.floderName!);
          final floderDescriptionOffset = object.floderDescription == null
              ? null
              : fbb.writeString(object.floderDescription!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, floderNameOffset);
          fbb.addOffset(2, floderDescriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = objectboxFolder(
              floderName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              floderDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    objectboxItem: EntityDefinition<objectboxItem>(
        model: _entities[1],
        toOneRelations: (objectboxItem object) => [],
        toManyRelations: (objectboxItem object) => {},
        getId: (objectboxItem object) => object.id,
        setId: (objectboxItem object, int id) {
          object.id = id;
        },
        objectToFB: (objectboxItem object, fb.Builder fbb) {
          final itemNameOffset = object.itemName == null
              ? null
              : fbb.writeString(object.itemName!);
          final itemDescriptionOffset = object.itemDescription == null
              ? null
              : fbb.writeString(object.itemDescription!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, itemNameOffset);
          fbb.addOffset(2, itemDescriptionOffset);
          fbb.addInt64(3, object.folderID);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = objectboxItem(
              itemName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              itemDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              folderID: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [objectboxFolder] entity fields to define ObjectBox queries.
class objectboxFolder_ {
  /// see [objectboxFolder.id]
  static final id =
      QueryIntegerProperty<objectboxFolder>(_entities[0].properties[0]);

  /// see [objectboxFolder.floderName]
  static final floderName =
      QueryStringProperty<objectboxFolder>(_entities[0].properties[1]);

  /// see [objectboxFolder.floderDescription]
  static final floderDescription =
      QueryStringProperty<objectboxFolder>(_entities[0].properties[2]);
}

/// [objectboxItem] entity fields to define ObjectBox queries.
class objectboxItem_ {
  /// see [objectboxItem.id]
  static final id =
      QueryIntegerProperty<objectboxItem>(_entities[1].properties[0]);

  /// see [objectboxItem.itemName]
  static final itemName =
      QueryStringProperty<objectboxItem>(_entities[1].properties[1]);

  /// see [objectboxItem.itemDescription]
  static final itemDescription =
      QueryStringProperty<objectboxItem>(_entities[1].properties[2]);

  /// see [objectboxItem.folderID]
  static final folderID =
      QueryIntegerProperty<objectboxItem>(_entities[1].properties[3]);
}
